import datetime
import os
import pprint
import re
import shutil
import sys
import traceback

from contextlib import contextmanager

import tank
from tank.platform.qt import QtCore, QtGui
from .playblast_dialog import PlayblastDialog

import c4d

class PlayblastManager(object):
    __uploadToShotgun = True

    """
    Main playblast functionality
    """
    def __init__(self, app, context=None):
        """
        Construction
        """
        self._app = app
        self._context = context if context else self._app.context

    def showDialog(self):
        try:
            self._app.engine.show_dialog("Playblast %s" % self._app.version,
                                         self._app, PlayblastDialog, self._app, self)
        except:
            traceback.print_exc()

    def doPlayblast(self, **overridePlayblastParams):
        template_work = self._app.get_template("template_work")
        template_shot = self._app.get_template("template_shot")
        
        doc = c4d.documents.GetActiveDocument()
        sceneName = doc[c4d.DOCUMENT_FILEPATH]

        fields = template_work.get_fields(sceneName)
        self.shotPlayblastPath = template_shot.apply_fields(fields)

        # Get value of optional config field "temp_directory". If path is
        # invalid or not absolute, use default tempdir.
        temp_directory = os.path.normpath( self._app.get_setting("temp_directory", "default") )
        if not os.path.isabs(temp_directory):
            import tempfile
            temp_directory = tempfile.gettempdir()

        # make sure it is exists
        if not os.path.isdir(temp_directory):
            os.mkdir(temp_directory)
        # use the basename of generated names
        self.localPlayblastPath = os.path.join(temp_directory, os.path.basename(self.shotPlayblastPath))
        # run actual playblast routine
        self.__createPlayblast(**overridePlayblastParams)
        self._app.log_info("Playblast for %s succesful" % sceneName)
        
    def __createPlayblast(self, **overridePlayblastParams):
        localPlayblastPath = self.localPlayblastPath
        
        doc = c4d.documents.GetActiveDocument()
        dc = doc.GetActiveRenderData()

        rdback = dc.GetClone()
        dc[c4d.RDATA_SAVEIMAGE] = True
        dc[c4d.RDATA_RENDERENGINE] = c4d.RDATA_RENDERENGINE_PREVIEWHARDWARE
        dc[c4d.RDATA_PATH] = localPlayblastPath
        dc[c4d.RDATA_FORMAT] = c4d.FILTER_MOVIE
        dc[c4d.RDATA_FRAMESEQUENCE] = 3

        render_data = dc.GetData()

        bitmap = c4d.bitmaps.BaseBitmap()

        bitmap.Init(
            x=int(render_data[c4d.RDATA_XRES]),
            y=int(render_data[c4d.RDATA_YRES]),
            depth=8
        )

        render_flags = (c4d.RENDERFLAGS_PREVIEWRENDER | c4d.RDATA_SHOWHUD | c4d.RENDERFLAGS_NODOCUMENTCLONE)
        # if overridePlayblastParams["viewer"]:
        #     render_flags = (c4d.RENDERFLAGS_PREVIEWRENDER | c4d.RDATA_SHOWHUD | c4d.RENDERFLAGS_NODOCUMENTCLONE | c4d.RENDERFLAGS_CREATE_PICTUREVIEWER)

        result_playblast = c4d.documents.RenderDocument(
                doc,
                render_data,
                bitmap,
                render_flags
            )

        rdback.CopyTo(dc,0)

        # # do post playblast process, copy files and other necessary stuff
        result = self._app.execute_hook("hook_post_playblast", action="copy_file", data=localPlayblastPath)
        
        if result:
            self._app.log_info("Playblast local file created: %s" % localPlayblastPath)

        # register new Version entity in shotgun or update existing version, minimize shotgun data
        if self.__uploadToShotgun:
            playblast_movie = self.shotPlayblastPath
            project = self._app.context.project
            entity = self._app.context.entity
            task = self._app.context.task

            data = { 'project': project,
                    'code': os.path.basename(playblast_movie),
                    'description': 'automatic generated by playblast app',
                    'sg_path_to_movie': playblast_movie,
                    'entity': entity,
                    'sg_task': task,
                }
            self._app.log_debug("Version-creation hook data:\n" + pprint.pformat(data))
            result = self._app.execute_hook("hook_post_playblast", action="create_version", data=data)
            self._app.log_debug("Version-creation hook result:\n" + pprint.pformat(result))

        # upload QT file if creation or update process run succesfully
        if result and self.__uploadToShotgun:
            result = self._app.execute_hook("hook_post_playblast", action="upload_movie",
                                            data=dict(path=data["sg_path_to_movie"],
                                                      project=project,
                                                      version_id=result["id"]))

        self._app.log_info("Playblast finished")

    def setUploadToShotgun(self, value):
        self._app.log_debug("Upload to Shotgun set to %s" % value)
        self.__uploadToShotgun = value
